import streamlit as st
import pandas as pd
import random

# рдбреЗрдЯрд╛рд╕реЗрдЯ рд▓реЛрдб рдХрд░реЗрдВ
@st.cache_data
def load_data():
    return pd.read_csv('common_diseases_expanded.csv')

df = load_data()

# рд╣рд┐рдВрджреА рдкреНрд░рддрд┐рдХреНрд░рд┐рдпрд╛рдПрдВ
responses = {
    'welcome': [
        "рдирдорд╕реНрддреЗ! рдореИрдВ рдЖрдкрдХреА рд╕реНрд╡рд╛рд╕реНрдереНрдп рд╕рдорд╕реНрдпрд╛рдУрдВ рдореЗрдВ рдорджрдж рдХрд░ рд╕рдХрддрд╛ рд╣реВрдБред",
        "рд╣реИрд▓реЛ! рдореИрдВ рдЖрдкрдХреЗ рд╕реНрд╡рд╛рд╕реНрдереНрдп рд╕рдВрдмрдВрдзреА рдкреНрд░рд╢реНрдиреЛрдВ рдХрд╛ рдЙрддреНрддрд░ рджреЗ рд╕рдХрддрд╛ рд╣реВрдБред",
        "рдЖрдкрдХрд╛ рд╕реНрд╡рд╛рдЧрдд рд╣реИ! рдХреГрдкрдпрд╛ рдЕрдкрдиреА рд╕реНрд╡рд╛рд╕реНрдереНрдп рд╕рдорд╕реНрдпрд╛ рдЪреБрдиреЗрдВред"
    ],
    'select_category': "рдХреГрдкрдпрд╛ рдЕрдкрдиреА рд╕рдорд╕реНрдпрд╛ рдХреА рд╢реНрд░реЗрдгреА рдЪреБрдиреЗрдВ:",
    'select_disease': "рдХреГрдкрдпрд╛ рдЕрдкрдирд╛ рд▓рдХреНрд╖рдг/рд╕рдорд╕реНрдпрд╛ рдЪреБрдиреЗрдВ:",
    'thanks': "рдЖрдкрдХреЛ рд╢реАрдШреНрд░ рд╕реНрд╡рд╕реНрде рд╣реЛрдиреЗ рдХреА рдХрд╛рдордирд╛ рдХрд░рддрд╛ рд╣реВрдБ!",
    'ask_more': "рдХреНрдпрд╛ рдЖрдк рдХрд┐рд╕реА рдЕрдиреНрдп рд╕рдорд╕реНрдпрд╛ рдХреЗ рдмрд╛рд░реЗ рдореЗрдВ рдЬрд╛рдирдирд╛ рдЪрд╛рд╣рддреЗ рд╣реИрдВ?"
}

# рд╕реЗрд╢рди рд╕реНрдЯреЗрдЯ рдЗрдирд┐рд╢рд┐рдпрд▓рд╛рдЗрдЬрд╝ рдХрд░реЗрдВ
if 'conversation' not in st.session_state:
    st.session_state.conversation = []
    st.session_state.step = 'welcome'
    st.session_state.category = None
    st.session_state.symptom = None

# рд╣реЗрд▓реНрдкрд░ рдлрдВрдХреНрд╢рдиреНрд╕
def get_categories():
    return sorted(df['Category'].unique().tolist())

def get_symptoms(category):
    return df[df['Category'] == category]['Symptom'].unique().tolist()

def get_treatment(category, symptom):
    result = df[(df['Category'] == category) & (df['Symptom'] == symptom)]
    return result.iloc[0] if not result.empty else None

def format_treatment(info):
    return f"""
    <div style='background:#f8f9fa;padding:15px;border-radius:10px;margin:10px 0;border-left:5px solid #4CAF50'>
        <h3 style='color:#2e7d32'>{info['Symptom']}</h3>
        <p><b>ЁЯЧия╕П рдХрд╛рд░рдг:</b> {info['Cause']}</p>
        <p><b>ЁЯТК рджрд╡рд╛рдПрдБ:</b> {info['Medicines (Indian)']}</p>
        <p><b>ЁЯПа рдШрд░реЗрд▓реВ рдЙрдкрд╛рдп:</b> {info['Home Remedies']}</p>
        <p><b>тЪая╕П рд╕рд╛рд╡рдзрд╛рдирд┐рдпрд╛рдБ:</b> {info['Precautions']}</p>
        <p><b>тД╣я╕П рд╡рд┐рд╡рд░рдг:</b> {info['Hindi Explanation']}</p>
    </div>
    """

def add_message(role, content):
    st.session_state.conversation.append({"role": role, "content": content})

# рдРрдк UI
st.title("ЁЯМ┐ рд╕реНрд╡рд╛рд╕реНрдереНрдп рд╕рд╣рд╛рдпрдХ рдЪреИрдЯрдмреЙрдЯ")
st.markdown("""
<style>
    .stButton>button {
        width: 100%;
        margin: 5px 0;
        text-align: left;
        padding: 12px;
        border-radius: 8px;
        border: 1px solid #e0e0e0;
        transition: all 0.3s;
    }
    .stButton>button:hover {
        background-color: #f0f0f0;
        border-color: #4CAF50;
    }
    [data-testid="stMarkdownContainer"] p { margin: 0.5em 0; }
    .stChatMessage { padding: 12px 16px; }
</style>
""", unsafe_allow_html=True)

# рдХрдиреНрд╡рд░реНрд╕реЗрд╢рди рдбрд┐рд╕реНрдкреНрд▓реЗ
for msg in st.session_state.conversation:
    with st.chat_message(msg["role"]):
        if '<div' in msg["content"]:
            st.markdown(msg["content"], unsafe_allow_html=True)
        else:
            st.markdown(msg["content"])

# рдЗрдирд┐рд╢рд┐рдпрд▓ рдЧреНрд░реАрдЯрд┐рдВрдЧ
if st.session_state.step == 'welcome' and not st.session_state.conversation:
    welcome_msg = random.choice(responses['welcome'])
    add_message("assistant", welcome_msg)
    add_message("assistant", responses['select_category'])
    st.session_state.step = 'category_selection'
    st.rerun()

# рдХреИрдЯреЗрдЧрд░реА рд╕рд┐рд▓реЗрдХреНрд╢рди рдмрдЯрди
if st.session_state.step == 'category_selection':
    cols = st.columns(2)
    for i, category in enumerate(get_categories()):
        with cols[i%2]:
            if st.button(f"ЁЯУБ {category}"):
                st.session_state.category = category
                add_message("user", f"рд╢реНрд░реЗрдгреА: {category}")
                add_message("assistant", f"рдЖрдкрдиреЗ рдЪреБрдирд╛: {category}")
                add_message("assistant", responses['select_disease'])
                st.session_state.step = 'symptom_selection'
                st.rerun()

# рд╕рд┐рдореНрдкрдЯрдо рд╕рд┐рд▓реЗрдХреНрд╢рди рдмрдЯрди
elif st.session_state.step == 'symptom_selection':
    symptoms = get_symptoms(st.session_state.category)
    cols = st.columns(2)
    for i, symptom in enumerate(symptoms):
        with cols[i%2]:
            if st.button(f"ЁЯФН {symptom}"):
                st.session_state.symptom = symptom
                add_message("user", f"рд▓рдХреНрд╖рдг: {symptom}")
                treatment = get_treatment(st.session_state.category, symptom)
                if treatment is not None:
                    add_message("assistant", format_treatment(treatment))
                    add_message("assistant", responses['thanks'])
                    add_message("assistant", responses['ask_more'])
                    st.session_state.step = 'restart'
                    st.rerun()

# рд░реАрд╕реНрдЯрд╛рд░реНрдЯ рдХрдиреНрд╡рд░реНрд╕реЗрд╢рди рдмрдЯрди
elif st.session_state.step == 'restart':
    col1, col2 = st.columns(2)
    with col1:
        if st.button("тЬЕ рд╣рд╛рдБ (рдХрд┐рд╕реА рдЕрдиреНрдп рд╕рдорд╕реНрдпрд╛ рдХреЗ рдмрд╛рд░реЗ рдореЗрдВ рдкреВрдЫреЗрдВ)"):
            add_message("user", "рд╣рд╛рдБ")
            add_message("assistant", responses['select_category'])
            st.session_state.step = 'category_selection'
            st.session_state.category = None
            st.session_state.symptom = None
            st.rerun()
    with col2:
        if st.button("тЭМ рдирд╣реАрдВ (рдЪреИрдЯ рд╕рдорд╛рдкреНрдд рдХрд░реЗрдВ)"):
            add_message("user", "рдирд╣реАрдВ")
            add_message("assistant", "рдзрдиреНрдпрд╡рд╛рдж! рдЕрдЪреНрдЫрд╛ рд╕реНрд╡рд╛рд╕реНрдереНрдп рдмрдирд╛рдП рд░рдЦреЗрдВред ЁЯЩП")
            st.session_state.step = 'end'
            st.rerun()