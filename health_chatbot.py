import streamlit as st
import pandas as pd
import random
from streamlit_chat import message

# Load dataset
@st.cache_data
def load_data():
    return pd.read_csv('common_diseases_expanded.csv')

df = load_data()

# Hindi responses with emojis
responses = {
    'welcome': [
        "рдирдорд╕реНрддреЗ! ЁЯСЛ рдореИрдВ рдЖрдкрдХреА рд╕реНрд╡рд╛рд╕реНрдереНрдп рд╕рдорд╕реНрдпрд╛рдУрдВ рдореЗрдВ рдорджрдж рдХрд░ рд╕рдХрддрд╛ рд╣реВрдБред",
        "рд╣реИрд▓реЛ! ЁЯй║ рдореИрдВ рдЖрдкрдХреЗ рд╕реНрд╡рд╛рд╕реНрдереНрдп рд╕рдВрдмрдВрдзреА рдкреНрд░рд╢реНрдиреЛрдВ рдХрд╛ рдЙрддреНрддрд░ рджреЗ рд╕рдХрддрд╛ рд╣реВрдБред",
        "рдЖрдкрдХрд╛ рд╕реНрд╡рд╛рдЧрдд рд╣реИ! ЁЯМ┐ рдХреГрдкрдпрд╛ рдЕрдкрдиреА рд╕реНрд╡рд╛рд╕реНрдереНрдп рд╕рдорд╕реНрдпрд╛ рдЪреБрдиреЗрдВред"
    ],
    'select_category': "рдХреГрдкрдпрд╛ рдиреАрдЪреЗ рд╕реЗ рдЕрдкрдиреА рд╕рдорд╕реНрдпрд╛ рдХреА рд╢реНрд░реЗрдгреА рдЪреБрдиреЗрдВ:",
    'select_disease': "рдЕрдм рдХреГрдкрдпрд╛ рдЕрдкрдирд╛ рд╡рд┐рд╢рд┐рд╖реНрдЯ рд▓рдХреНрд╖рдг/рд╕рдорд╕реНрдпрд╛ рдЪреБрдиреЗрдВ:",
    'thanks': "рдЖрдкрдХреЛ рд╢реАрдШреНрд░ рд╕реНрд╡рд╕реНрде рд╣реЛрдиреЗ рдХреА рдХрд╛рдордирд╛ рдХрд░рддрд╛ рд╣реВрдБ! ЁЯЩП",
    'ask_more': "рдХреНрдпрд╛ рдЖрдк рдХрд┐рд╕реА рдЕрдиреНрдп рд╕рдорд╕реНрдпрд╛ рдХреЗ рдмрд╛рд░реЗ рдореЗрдВ рдЬрд╛рдирдирд╛ рдЪрд╛рд╣рддреЗ рд╣реИрдВ?",
    'goodbye': "рдзрдиреНрдпрд╡рд╛рдж! рдЕрдЪреНрдЫрд╛ рд╕реНрд╡рд╛рд╕реНрдереНрдп рдмрдирд╛рдП рд░рдЦреЗрдВред ЁЯМЯ рд╣рдореЗрд╢рд╛ рдЦреБрд╢ рд░рд╣реЗрдВ!",
    'help': "рдореИрдВ рдЖрдкрдХреА рдХреИрд╕реЗ рдорджрдж рдХрд░ рд╕рдХрддрд╛ рд╣реВрдБ? рдиреАрдЪреЗ рджрд┐рдП рдЧрдП рд╡рд┐рдХрд▓реНрдкреЛрдВ рдореЗрдВ рд╕реЗ рдЪреБрдиреЗрдВред"
}

# Initialize session state
if 'conversation' not in st.session_state:
    st.session_state.conversation = []
    st.session_state.step = 'welcome'
    st.session_state.category = None
    st.session_state.symptom = None
    st.session_state.show_help = False

# Helper functions
def get_categories():
    return sorted(df['Category'].unique().tolist())

def get_symptoms(category):
    return df[df['Category'] == category]['Symptom'].unique().tolist()

def get_treatment(category, symptom):
    result = df[(df['Category'] == category) & (df['Symptom'] == symptom)]
    return result.iloc[0] if not result.empty else None

def format_treatment(info):
    return f"""
    <div style='background:#f5fbf6;padding:15px;border-radius:10px;margin:10px 0;border-left:5px solid #4CAF50;box-shadow:0 2px 8px rgba(0,0,0,0.1)'>
        <h3 style='color:#2e7d32;border-bottom:1px solid #e0e0e0;padding-bottom:8px'>ЁЯй║ {info['Symptom']}</h3>
        <p><b>ЁЯФН рдХрд╛рд░рдг:</b> {info['Cause']}</p>
        <p><b>ЁЯТК рджрд╡рд╛рдПрдБ:</b> {info['Medicines (Indian)']}</p>
        <p><b>ЁЯПа рдШрд░реЗрд▓реВ рдЙрдкрд╛рдп:</b> {info['Home Remedies']}</p>
        <p><b>тЪая╕П рд╕рд╛рд╡рдзрд╛рдирд┐рдпрд╛рдБ:</b> {info['Precautions']}</p>
        <p><b>тД╣я╕П рд╡рд┐рд╡рд░рдг:</b> {info['Hindi Explanation']}</p>
    </div>
    """

def add_message(role, content, is_html=False):
    st.session_state.conversation.append({"role": role, "content": content, "is_html": is_html})

def reset_conversation():
    st.session_state.conversation = []
    st.session_state.step = 'welcome'
    st.session_state.category = None
    st.session_state.symptom = None
    st.session_state.show_help = False
    welcome_msg = random.choice(responses['welcome'])
    add_message("assistant", welcome_msg)
    add_message("assistant", responses['select_category'])

# App UI
st.set_page_config(page_title="рд╕реНрд╡рд╛рд╕реНрдереНрдп рд╕рд╣рд╛рдпрдХ", page_icon="ЁЯМ┐", layout="wide")

# Custom CSS
st.markdown("""
<style>
    /* Main container */
    .main {
        background-color: #f9f9f9;
    }
    
    /* Chat messages */
    .stChatMessage {
        padding: 12px 16px;
        border-radius: 12px;
        margin-bottom: 8px;
        max-width: 85%;
    }
    
    .stChatMessage.user {
        background-color: #e3f2fd;
        margin-left: auto;
        border-bottom-right-radius: 4px;
    }
    
    .stChatMessage.assistant {
        background-color: #f1f8e9;
        margin-right: auto;
        border-bottom-left-radius: 4px;
    }
    
    /* Buttons */
    .stButton>button {
        width: 100%;
        margin: 5px 0;
        text-align: left;
        padding: 12px;
        border-radius: 8px;
        border: 1px solid #e0e0e0;
        transition: all 0.3s;
        background-color: white;
    }
    
    .stButton>button:hover {
        background-color: #f0f4ff;
        border-color: #4CAF50;
        transform: translateY(-2px);
        box-shadow: 0 2px 8px rgba(0,0,0,0.1);
    }
    
    /* Header */
    .header {
        background: linear-gradient(135deg, #4CAF50, #2E7D32);
        color: white;
        padding: 1.5rem;
        border-radius: 0 0 12px 12px;
        margin-bottom: 1.5rem;
        box-shadow: 0 4px 12px rgba(0,0,0,0.1);
    }
    
    /* Info cards */
    .info-card {
        background: white;
        border-radius: 12px;
        padding: 1rem;
        margin: 1rem 0;
        box-shadow: 0 2px 8px rgba(0,0,0,0.1);
        border-left: 4px solid #4CAF50;
    }
    
    /* Responsive columns */
    @media (max-width: 768px) {
        .column {
            width: 100% !important;
        }
    }
</style>
""", unsafe_allow_html=True)

# Header
st.markdown("""
<div class="header">
    <h1 style="color:white;margin:0;">ЁЯМ┐ рд╕реНрд╡рд╛рд╕реНрдереНрдп рд╕рд╣рд╛рдпрдХ рдЪреИрдЯрдмреЙрдЯ</h1>
    <p style="color:white;margin:0;opacity:0.8;">рдЖрдкрдХрд╛ рд╡реНрдпрдХреНрддрд┐рдЧрдд рд╕реНрд╡рд╛рд╕реНрдереНрдп рд╕рд╣рд╛рдпрдХ</p>
</div>
""", unsafe_allow_html=True)

# Sidebar
with st.sidebar:
    st.markdown("""
    <div style="text-align:center;margin-bottom:20px;">
        <h3>ЁЯй║ рд╕реНрд╡рд╛рд╕реНрдереНрдп рд╕рд╣рд╛рдпрдХ</h3>
        <p>рдЖрдкрдХреА рд╕рд╛рдорд╛рдиреНрдп рд╕реНрд╡рд╛рд╕реНрдереНрдп рд╕рдорд╕реНрдпрд╛рдУрдВ рдХрд╛ рд╕рдорд╛рдзрд╛рди</p>
    </div>
    """, unsafe_allow_html=True)
    
    if st.button("ЁЯФД рдирдпрд╛ рдЪреИрдЯ рд╢реБрд░реВ рдХрд░реЗрдВ", use_container_width=True):
        reset_conversation()
        st.rerun()
    
    st.markdown("---")
    st.markdown("""
    <div class="info-card">
        <h4>тД╣я╕П рдЪреИрдЯрдмреЙрдЯ рдХреЗ рдмрд╛рд░реЗ рдореЗрдВ</h4>
        <p>рдпрд╣ рдЪреИрдЯрдмреЙрдЯ рд╕рд╛рдорд╛рдиреНрдп рд╕реНрд╡рд╛рд╕реНрдереНрдп рд╕рдорд╕реНрдпрд╛рдУрдВ рдХреЗ рдмрд╛рд░реЗ рдореЗрдВ рдЬрд╛рдирдХрд╛рд░реА рдкреНрд░рджрд╛рди рдХрд░рддрд╛ рд╣реИред</p>
        <p>рдХреГрдкрдпрд╛ рдзреНрдпрд╛рди рджреЗрдВ: рдпрд╣ рдкреЗрд╢реЗрд╡рд░ рдЪрд┐рдХрд┐рддреНрд╕рд╛ рд╕рд▓рд╛рд╣ рдХрд╛ рд╡рд┐рдХрд▓реНрдк рдирд╣реАрдВ рд╣реИред</p>
    </div>
    """, unsafe_allow_html=True)
    
    st.markdown("""
    <div style="text-align:center;margin-top:20px;font-size:0.8em;color:#666;">
        <p>┬й 2025 рд╕реНрд╡рд╛рд╕реНрдереНрдп рд╕рд╣рд╛рдпрдХ</p>
    </div>
    """, unsafe_allow_html=True)

# Initial greeting
if st.session_state.step == 'welcome' and not st.session_state.conversation:
    welcome_msg = random.choice(responses['welcome'])
    add_message("assistant", welcome_msg)
    add_message("assistant", responses['select_category'])
    st.session_state.step = 'category_selection'
    st.rerun()

# Display conversation
for i, msg in enumerate(st.session_state.conversation):
    if msg["role"] == "user":
        message(msg["content"], is_user=True, key=f"user_{i}")
    else:
        if msg.get("is_html", False):
            st.markdown(msg["content"], unsafe_allow_html=True)
        else:
            message(msg["content"], key=f"assistant_{i}")

# Category selection
if st.session_state.step == 'category_selection':
    st.markdown(f"**{responses['select_category']}**")
    cols = st.columns(2)
    categories = get_categories()
    
    for i, category in enumerate(categories):
        with cols[i%2]:
            if st.button(f"ЁЯУБ {category}", key=f"cat_{i}"):
                st.session_state.category = category
                add_message("user", f"рд╢реНрд░реЗрдгреА: {category}")
                add_message("assistant", f"рдЖрдкрдиреЗ рдЪреБрдирд╛: {category}")
                add_message("assistant", responses['select_disease'])
                st.session_state.step = 'symptom_selection'
                st.rerun()

# Symptom selection
elif st.session_state.step == 'symptom_selection':
    st.markdown(f"**{responses['select_disease']}**")
    symptoms = get_symptoms(st.session_state.category)
    cols = st.columns(2)
    
    for i, symptom in enumerate(symptoms):
        with cols[i%2]:
            if st.button(f"ЁЯФН {symptom}", key=f"symp_{i}"):
                st.session_state.symptom = symptom
                add_message("user", f"рд▓рдХреНрд╖рдг: {symptom}")
                treatment = get_treatment(st.session_state.category, symptom)
                if treatment is not None:
                    add_message("assistant", format_treatment(treatment), is_html=True)
                    add_message("assistant", responses['thanks'])
                    add_message("assistant", responses['ask_more'])
                    st.session_state.step = 'restart'
                    st.rerun()

# Restart conversation
elif st.session_state.step == 'restart':
    st.markdown("**рдХреНрдпрд╛ рдЖрдк рдХрд┐рд╕реА рдЕрдиреНрдп рд╕рдорд╕реНрдпрд╛ рдХреЗ рдмрд╛рд░реЗ рдореЗрдВ рдЬрд╛рдирдирд╛ рдЪрд╛рд╣рддреЗ рд╣реИрдВ?**")
    col1, col2 = st.columns(2)
    with col1:
        if st.button("тЬЕ рд╣рд╛рдБ, рдирдИ рд╕рдорд╕реНрдпрд╛ рдкреВрдЫреЗрдВ", key="yes_new"):
            add_message("user", "рд╣рд╛рдБ, рдирдИ рд╕рдорд╕реНрдпрд╛ рдкреВрдЫреЗрдВ")
            add_message("assistant", responses['select_category'])
            st.session_state.step = 'category_selection'
            st.session_state.category = None
            st.session_state.symptom = None
            st.rerun()
    with col2:
        if st.button("тЭМ рдирд╣реАрдВ, рдЪреИрдЯ рд╕рдорд╛рдкреНрдд рдХрд░реЗрдВ", key="no_end"):
            add_message("user", "рдирд╣реАрдВ, рдЪреИрдЯ рд╕рдорд╛рдкреНрдд рдХрд░реЗрдВ")
            add_message("assistant", responses['goodbye'])
            st.session_state.step = 'end'
            st.rerun()

# End state
elif st.session_state.step == 'end':
    if st.button("ЁЯФД рдирдпрд╛ рдЪреИрдЯ рд╢реБрд░реВ рдХрд░реЗрдВ", key="restart_end"):
        reset_conversation()
        st.rerun()

# Add some empty space at the bottom
st.markdown("<br><br>", unsafe_allow_html=True)
